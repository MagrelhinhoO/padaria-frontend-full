{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, signal } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AuthService } from '../../../../core/services/auth/auth.service';\nimport { TokenService } from '../../../../core/services/auth/token.service';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nlet LoginComponent = class LoginComponent {\n  auth;\n  tokenService;\n  router;\n  // Modo estático: credenciais fixas root / root\n  staticUser = 'root@local';\n  staticPass = 'root';\n  email = '';\n  password = '';\n  loading = signal(false);\n  constructor(auth, tokenService, router) {\n    this.auth = auth;\n    this.tokenService = tokenService;\n    this.router = router;\n  }\n  submit() {\n    if (!this.email || !this.password) return;\n    // Verificação estática primeiro\n    if (this.email === this.staticUser && this.password === this.staticPass) {\n      this.tokenService.setSession('static-token', ['ADMIN'], 'Administrador');\n      this.router.navigate(['/menu']);\n      return;\n    }\n    // Opcional: fallback para backend se quiser testar API (comentado por padrão)\n    // this.loading.set(true);\n    // this.auth.login({ email: this.username, password: this.password }).subscribe({\n    //   next: () => {\n    //     this.loading.set(false);\n    //     this.router.navigate(['/home']);\n    //   },\n    //   error: err => {\n    //     this.loading.set(false);\n    //     Swal.fire('Erro', err.error?.message || 'Falha no login', 'error');\n    //   }\n    // });\n    Swal.fire('Credenciais inválidas', 'Use email: root@local e senha: root', 'warning');\n  }\n};\nLoginComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-login',\n  imports: [FormsModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n}), __metadata(\"design:paramtypes\", [AuthService, TokenService, Router])], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}