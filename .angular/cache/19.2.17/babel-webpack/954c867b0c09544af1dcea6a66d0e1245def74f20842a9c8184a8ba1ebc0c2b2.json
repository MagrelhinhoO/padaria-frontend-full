{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, inject, signal } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TokenService } from '../../../../core/services/auth/token.service';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nlet LoginComponent = class LoginComponent {\n  router = inject(Router);\n  tokenService = inject(TokenService);\n  email = '';\n  password = '';\n  loading = signal(false);\n  staticEmail = 'admin@exemplo.com';\n  staticPass = 'admin123';\n  submit() {\n    this.loading.set(true);\n    // Simulação de login estático\n    if (this.email === this.staticEmail && this.password === this.staticPass) {\n      // setSession(token: string, roles: string[], name: string)\n      this.tokenService.setSession('static-jwt-token-for-root', ['admin', 'user'], 'Administrador');\n      this.router.navigate(['/menu']);\n    } else {\n      // Exibe uma mensagem de erro se as credenciais estiverem incorretas\n      Swal.fire({\n        title: 'Erro de Login',\n        text: 'Email ou senha inválidos.',\n        icon: 'error',\n        timer: 3000,\n        showConfirmButton: false\n      });\n    }\n    this.loading.set(false);\n  }\n};\nLoginComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-login',\n  imports: [FormsModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}