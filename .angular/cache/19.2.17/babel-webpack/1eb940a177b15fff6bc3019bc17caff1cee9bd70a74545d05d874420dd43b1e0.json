{"ast":null,"code":"import { ElementRef, inject } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nexport let AppRootComponent = /*#__PURE__*/(() => {\n  class AppRootComponent {\n    host = inject(ElementRef);\n    ngAfterViewInit() {\n      // Remove splash children if still present (Angular mount replaced content but fallback inside <app-root> might remain during hydration time)\n      // Ensure only router content stays.\n      // (Defensivo: caso nada a remover, ignora.)\n      const el = this.host.nativeElement;\n      // router-outlet view is projected separately; no extra handling needed.\n    }\n    static ɵfac = function AppRootComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AppRootComponent)();\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppRootComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      template: function AppRootComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      dependencies: [RouterOutlet],\n      encapsulation: 2\n    });\n  }\n  return AppRootComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}